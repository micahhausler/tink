// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// Ensure, that WorkflowServiceClientMock does implement WorkflowServiceClient.
// If this is not the case, regenerate this file with moq.
var _ WorkflowServiceClient = &WorkflowServiceClientMock{}

// WorkflowServiceClientMock is a mock implementation of WorkflowServiceClient.
//
// 	func TestSomethingThatUsesWorkflowServiceClient(t *testing.T) {
//
// 		// make and configure a mocked WorkflowServiceClient
// 		mockedWorkflowServiceClient := &WorkflowServiceClientMock{
// 			GetWorkflowActionsFunc: func(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error) {
// 				panic("mock out the GetWorkflowActions method")
// 			},
// 			GetWorkflowContextsFunc: func(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error) {
// 				panic("mock out the GetWorkflowContexts method")
// 			},
// 			GetWorkflowDataFunc: func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
// 				panic("mock out the GetWorkflowData method")
// 			},
// 			ReportActionStatusFunc: func(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error) {
// 				panic("mock out the ReportActionStatus method")
// 			},
// 			UpdateWorkflowDataFunc: func(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error) {
// 				panic("mock out the UpdateWorkflowData method")
// 			},
// 		}
//
// 		// use mockedWorkflowServiceClient in code that requires WorkflowServiceClient
// 		// and then make assertions.
//
// 	}
type WorkflowServiceClientMock struct {
	// GetWorkflowActionsFunc mocks the GetWorkflowActions method.
	GetWorkflowActionsFunc func(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error)

	// GetWorkflowContextsFunc mocks the GetWorkflowContexts method.
	GetWorkflowContextsFunc func(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error)

	// GetWorkflowDataFunc mocks the GetWorkflowData method.
	GetWorkflowDataFunc func(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error)

	// ReportActionStatusFunc mocks the ReportActionStatus method.
	ReportActionStatusFunc func(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error)

	// UpdateWorkflowDataFunc mocks the UpdateWorkflowData method.
	UpdateWorkflowDataFunc func(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetWorkflowActions holds details about calls to the GetWorkflowActions method.
		GetWorkflowActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowActionsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowContexts holds details about calls to the GetWorkflowContexts method.
		GetWorkflowContexts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowContextRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetWorkflowData holds details about calls to the GetWorkflowData method.
		GetWorkflowData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetWorkflowDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ReportActionStatus holds details about calls to the ReportActionStatus method.
		ReportActionStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *WorkflowActionStatus
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UpdateWorkflowData holds details about calls to the UpdateWorkflowData method.
		UpdateWorkflowData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *UpdateWorkflowDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetWorkflowActions  sync.RWMutex
	lockGetWorkflowContexts sync.RWMutex
	lockGetWorkflowData     sync.RWMutex
	lockReportActionStatus  sync.RWMutex
	lockUpdateWorkflowData  sync.RWMutex
}

// GetWorkflowActions calls GetWorkflowActionsFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowActions(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error) {
	if mock.GetWorkflowActionsFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowActionsFunc: method is nil but WorkflowServiceClient.GetWorkflowActions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowActionsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowActions.Lock()
	mock.calls.GetWorkflowActions = append(mock.calls.GetWorkflowActions, callInfo)
	mock.lockGetWorkflowActions.Unlock()
	return mock.GetWorkflowActionsFunc(ctx, in, opts...)
}

// GetWorkflowActionsCalls gets all the calls that were made to GetWorkflowActions.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowActionsCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowActionsCalls() []struct {
	Ctx  context.Context
	In   *WorkflowActionsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowActionsRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowActions.RLock()
	calls = mock.calls.GetWorkflowActions
	mock.lockGetWorkflowActions.RUnlock()
	return calls
}

// GetWorkflowContexts calls GetWorkflowContextsFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowContexts(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error) {
	if mock.GetWorkflowContextsFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowContextsFunc: method is nil but WorkflowServiceClient.GetWorkflowContexts was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowContextRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowContexts.Lock()
	mock.calls.GetWorkflowContexts = append(mock.calls.GetWorkflowContexts, callInfo)
	mock.lockGetWorkflowContexts.Unlock()
	return mock.GetWorkflowContextsFunc(ctx, in, opts...)
}

// GetWorkflowContextsCalls gets all the calls that were made to GetWorkflowContexts.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowContextsCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowContextsCalls() []struct {
	Ctx  context.Context
	In   *WorkflowContextRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowContextRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowContexts.RLock()
	calls = mock.calls.GetWorkflowContexts
	mock.lockGetWorkflowContexts.RUnlock()
	return calls
}

// GetWorkflowData calls GetWorkflowDataFunc.
func (mock *WorkflowServiceClientMock) GetWorkflowData(ctx context.Context, in *GetWorkflowDataRequest, opts ...grpc.CallOption) (*GetWorkflowDataResponse, error) {
	if mock.GetWorkflowDataFunc == nil {
		panic("WorkflowServiceClientMock.GetWorkflowDataFunc: method is nil but WorkflowServiceClient.GetWorkflowData was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetWorkflowData.Lock()
	mock.calls.GetWorkflowData = append(mock.calls.GetWorkflowData, callInfo)
	mock.lockGetWorkflowData.Unlock()
	return mock.GetWorkflowDataFunc(ctx, in, opts...)
}

// GetWorkflowDataCalls gets all the calls that were made to GetWorkflowData.
// Check the length with:
//     len(mockedWorkflowServiceClient.GetWorkflowDataCalls())
func (mock *WorkflowServiceClientMock) GetWorkflowDataCalls() []struct {
	Ctx  context.Context
	In   *GetWorkflowDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetWorkflowDataRequest
		Opts []grpc.CallOption
	}
	mock.lockGetWorkflowData.RLock()
	calls = mock.calls.GetWorkflowData
	mock.lockGetWorkflowData.RUnlock()
	return calls
}

// ReportActionStatus calls ReportActionStatusFunc.
func (mock *WorkflowServiceClientMock) ReportActionStatus(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error) {
	if mock.ReportActionStatusFunc == nil {
		panic("WorkflowServiceClientMock.ReportActionStatusFunc: method is nil but WorkflowServiceClient.ReportActionStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *WorkflowActionStatus
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockReportActionStatus.Lock()
	mock.calls.ReportActionStatus = append(mock.calls.ReportActionStatus, callInfo)
	mock.lockReportActionStatus.Unlock()
	return mock.ReportActionStatusFunc(ctx, in, opts...)
}

// ReportActionStatusCalls gets all the calls that were made to ReportActionStatus.
// Check the length with:
//     len(mockedWorkflowServiceClient.ReportActionStatusCalls())
func (mock *WorkflowServiceClientMock) ReportActionStatusCalls() []struct {
	Ctx  context.Context
	In   *WorkflowActionStatus
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *WorkflowActionStatus
		Opts []grpc.CallOption
	}
	mock.lockReportActionStatus.RLock()
	calls = mock.calls.ReportActionStatus
	mock.lockReportActionStatus.RUnlock()
	return calls
}

// UpdateWorkflowData calls UpdateWorkflowDataFunc.
func (mock *WorkflowServiceClientMock) UpdateWorkflowData(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	if mock.UpdateWorkflowDataFunc == nil {
		panic("WorkflowServiceClientMock.UpdateWorkflowDataFunc: method is nil but WorkflowServiceClient.UpdateWorkflowData was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *UpdateWorkflowDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdateWorkflowData.Lock()
	mock.calls.UpdateWorkflowData = append(mock.calls.UpdateWorkflowData, callInfo)
	mock.lockUpdateWorkflowData.Unlock()
	return mock.UpdateWorkflowDataFunc(ctx, in, opts...)
}

// UpdateWorkflowDataCalls gets all the calls that were made to UpdateWorkflowData.
// Check the length with:
//     len(mockedWorkflowServiceClient.UpdateWorkflowDataCalls())
func (mock *WorkflowServiceClientMock) UpdateWorkflowDataCalls() []struct {
	Ctx  context.Context
	In   *UpdateWorkflowDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *UpdateWorkflowDataRequest
		Opts []grpc.CallOption
	}
	mock.lockUpdateWorkflowData.RLock()
	calls = mock.calls.UpdateWorkflowData
	mock.lockUpdateWorkflowData.RUnlock()
	return calls
}
